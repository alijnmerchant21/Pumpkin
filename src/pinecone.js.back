//This file will handle initializing Pinecone, creating the index, inserting vectors, and any other Pinecone related operations.

//const Pinecone = require('pinecone-client');
//const pinecone = new Pinecone(process.env.PINECONE_API_KEY);

/*const { PineconeClient } = require('@pinecone-database/pinecone');

const pinecone = new PineconeClient();

const PINECONE_ENVIRONMENT = 'us-west4-gcp-free';

(async () => {
    try {
        await pinecone.init({
            apiKey: process.env.PINECONE_API_KEY,
            environment: PINECONE_ENVIRONMENT,
        });
} catch (error) {
    console.error("Error initializing Pinecone:", error);
}

})();


//Initialize Pinecone Vectore Store 
async function initializeVectoreStore(indexName) {
    try {
        //Create an index in Pinecone
        await pinecone.createIndex(indexName, "cosine");
        console.log("Successfully initialized pinecone vectore store with name :${indexName}");
    } catch (error) {
        console.error("Error initializing Pinecone vector store:", error);
    }
}

async function indexVectors(indexName, vectors) {
    try {
        // Assuming Pinecone allows batch insertion. Otherwise, you'd loop and insert individually.
        await pinecone.insert(indexName, vectors);
        console.log(`Successfully indexed ${vectors.length} vectors in Pinecone.`);
    } catch (error) {
        console.error("Error indexing vectors in Pinecone:", error);
    }
}

async function searchInPinecone(question) {
    // Convert question to vector
    const questionVector = await embedWithLangchain(question);  // Assuming you have this function from langchain.js
    
    // Search in Pinecone
    try {
        const searchResults = await pinecone.query("pumpkin-index", [questionVector], 3); // Search for top 3 results
        if (searchResults && searchResults.length > 0) {
            // Format the result and return. This is a basic way. You can format it as per your requirement.
            return searchResults[0].text; // Here we're only returning the top result's text
        }
        return "Sorry, I couldn't find an answer in the knowledge base.";
    } catch (error) {
        console.error("Error searching in Pinecone:", error);
        return "Sorry, I faced an error searching for the answer.";
    }
}

// Export the functions for use in other files
module.exports = {
    initializeVectoreStore,
    indexVectors,
    searchInPinecone
};*/


const { PineconeClient } = require('@pinecone-database/pinecone');

const pinecone = new PineconeClient({
    apiKey: process.env.PINECONE_API_KEY,
    environment: 'us-west4-gcp-free',
});

async function initializeVectorStore(indexName) {
    try {
        await pinecone.createIndex(indexName, "cosine");
        console.log(`Successfully initialized Pinecone vector store with name: ${indexName}`);
    } catch (error) {
        console.error("Error initializing Pinecone vector store:", error);
    }
}

async function indexVectors(indexName, vectors) {
    try {
        await pinecone.insert(indexName, vectors);
        console.log(`Successfully indexed ${vectors.length} vectors in Pinecone.`);
    } catch (error) {
        console.error("Error indexing vectors in Pinecone:", error);
    }
}

async function searchInPinecone(questionVector) {
    try {
        const searchResults = await pinecone.query(process.env.PINECONE_INDEX, [questionVector], 3);
        if (searchResults && searchResults.length > 0) {
            return searchResults[0].text;
        }
        return "Sorry, I couldn't find an answer in the knowledge base.";
    } catch (error) {
        console.error("Error searching in Pinecone:", error);
        return "Sorry, I faced an error searching for the answer.";
    }
}

module.exports = {
    initializeVectorStore,
    indexVectors,
    searchInPinecone
};


